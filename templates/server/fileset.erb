<% options = [ "aclsupport = #{ @acl_support ? 'yes' : 'no' }",
               "Sparse = #{ @sparse ? 'yes' : 'no' }",
               "Signature = MD5"
               ]
   if @compression
       options.push("Compression = #{ @compression }");
   end
   if @onefs
       options.push("OneFS = yes")
   else
       options.push("OneFS = no")
       [@fstype].flatten.sort.each do |fs|
           options.push("FSType = #{ fs }")
       end
   end
-%>
FileSet {
  Name = "<%= @fset_name %>"
  Ignore FileSet Changes = <%= @ignore_changes ? 'yes' : 'no' %>
  Include {
<% if not @include_patterns.empty?
     # Handling of include patterns quite complex.  Blame Bacula.

     # File directives are relatively simple.  They will be paired
     # with an exclusion rule of WildFile = "*", so that recursion
     # is not halted.

     file_rules = []
     %w{wild_file regex_file}.each do |k|
       directive = k.split('_').map { |c| c.capitalize }.join('')
       if @include_patterns.include? k
         file_rules.push([@include_patterns[k]].flatten.map do |val|
           "#{directive} = #{val.inspect}"
         end)
       end
     end

     # Directory directives are harder.  We want to avoid needless
     # recursion, so we will always pair this with an exclusion of
     # WildDir = "*".  Unfortunately, this means include paths must
     # list the direct parent directory of each pattern.  We don't
     # enforce this, but add a comment warning about this.
     #
     # We use the same check for regex_dir, although this is quite
     # likely to give a faulty warning.

     dir_rules = []
     %w{wild_dir regex_dir}.each do |k|
       directive = k.split('_').map { |c| c.capitalize }.join('')
       if @include_patterns.include? k
         [@include_patterns[k]].flatten.each do |val|
           dirname = File.dirname(val)
           if (dirname.start_with? '/' and
               @include_paths.select { |p| dirname == p }.empty?)
-%>
    # WARNING: <%= k %> entry <%= val %> does not look like a
    # direct child directory of any included paths, this will probably
    # not work as intended.
<%         end
           dir_rules.push([@include_patterns[k]].flatten.map do |val|
             "#{directive} = #{val.inspect}"
           end)
         end
       end
     end
     unless file_rules.empty?
-%>
    Options {
        <%= options.join("\n        ") %>
        <%= file_rules.join("\n        ") %>
    }
    Options {
        RegexFile = ".*"
        Exclude = yes
    }
<%   end -%>
<%   unless dir_rules.empty? -%>
    Options {
        <%= options.join("\n        ") %>
        <%= dir_rules.join("\n        ") %>
    }
    Options {
        RegexDir = ".*"
        Exclude = yes
    }
<%   end -%>
<% end -%>
<% if not @exclude_patterns.empty? -%>
    Options {
<%   %w{wild_file wild_dir regex_file regex_dir}.each do |k|
       directive = k.split('_').map { |c| c.capitalize }.join('')
       if @exclude_patterns.include? k
         [@exclude_patterns[k]].flatten.each do |val| -%>
      <%= directive %> = <%= val.inspect %>
<%       end
       end
     end -%>
      Exclude = yes
    }
<% end -%>
    Options {
        <%= options.join("\n        ") %>
    }
<% [@plugins].flatten.each do |plugin| -%>
    Plugin = "<%= plugin %>"
<% end -%>
<% # Single element arrays become plain strings in PuppetDB
   incl = [@include_paths].flatten
   incl.each do |path| -%>
    File = <%= path.inspect %>
<% end -%>
<% unless @exclude_dir_containing.to_s == '' -%>
    Exclude dir containing = "<%= @exclude_dir_containing %>"
<% end -%>
  }
<% if not @exclude_paths.empty?
     excl = [@exclude_paths].flatten

     # If one of the include paths is "/", use full exclude list.
     # Otherwise filter out excludes which do not prefix match any of
     # the include paths.

     unless incl.include? '/'
       excl = excl.reject do |p|
         incl.select { |i| p =~ %r{^#{i}/} }.empty?
       end
     end
     if not excl.empty?
-%>
  Exclude {
<%     excl.uniq.each do |path| -%>
    File = <%= path.inspect %>
<%     end -%>
  }
<%   end -%>
<% end -%>
}
